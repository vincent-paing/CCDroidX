name: Release Tag CI/CD

on:
  push:
    tags:
      - '*'
jobs:
  test:
    name: Static Code Check & Test
    runs-on: ubuntu-18.04
    env:
      CCDROIDX_RELEASE_KEYSTORE_PASSWORD: ${{ secrets.CCDROIDX_RELEASE_KEYSTORE_PASSWORD }}
      CCDROIDX_RELEASE_KEY_ALIAS: ${{ secrets.CCDROIDX_RELEASE_KEY_ALIAS }}
      CCDROIDX_RELEASE_KEY_ALIAS_PASSWORD: ${{ secrets.CCDROIDX_RELEASE_KEY_ALIAS_PASSWORD }}
      CCDROIDX_RELEASE_KEYSTORE_PATH: release.keystore
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Stub release keystore file
        run: |
          touch release.keystore

      - name: Set up JDK 1.8
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'

      - name: Lint check
        run: ./gradlew lintDebug

      - name: Unit Test
        run: ./gradlew testDebug

  create_apk:
    needs: test
    name: Deploy APK
    runs-on: ubuntu-18.04
    env:
      CCDROIDX_RELEASE_KEYSTORE_PASSWORD: ${{ secrets.CCDROIDX_RELEASE_KEYSTORE_PASSWORD }}
      CCDROIDX_RELEASE_KEY_ALIAS: ${{ secrets.CCDROIDX_RELEASE_KEY_ALIAS }}
      CCDROIDX_RELEASE_KEY_ALIAS_PASSWORD: ${{ secrets.CCDROIDX_RELEASE_KEY_ALIAS_PASSWORD }}
      CCDROIDX_RELEASE_KEYSTORE_PATH: release.keystore
      ENCRYPTED_KEY_STORE: ${{ secrets.ENCRYPTED_KEY_STORE }}
    steps:
      - uses: actions/checkout@v2
      - name: set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          distribution: 'temurin'
          java-version: '11'

      - name: Decrypt keystore
        run: |
          TMP_KEYSTORE_FILE_PATH="${RUNNER_TEMP}"/keystore
          mkdir "${TMP_KEYSTORE_FILE_PATH}"
          echo $ENCRYPTED_KEY_STORE | base64 -di > "${TMP_KEYSTORE_FILE_PATH}"/release.keystore
          mv "${TMP_KEYSTORE_FILE_PATH}"/release.keystore release.keystore

      - name: Build APK
        run: ./gradlew assembleRelease

      - name: Copy APK to outputs
        run: |
          mkdir -p outputs/
          find . -type f -regex ".*\/*\.apk" -exec cp {} outputs/ \;

      - name: Create Artifact
        uses: actions/upload-artifact@v3
        with:
          name: Builds
          path: outputs/*.apk